// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewOwner extends ethereum.Event {
  get params(): NewOwner__Params {
    return new NewOwner__Params(this);
  }
}

export class NewOwner__Params {
  _event: NewOwner;

  constructor(event: NewOwner) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get current(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewPotentialOwner extends ethereum.Event {
  get params(): NewPotentialOwner__Params {
    return new NewPotentialOwner__Params(this);
  }
}

export class NewPotentialOwner__Params {
  _event: NewPotentialOwner;

  constructor(event: NewPotentialOwner) {
    this._event = event;
  }

  get old(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get potential(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NexoToken extends ethereum.SmartContract {
  static bind(address: Address): NexoToken {
    return new NexoToken("NexoToken", address);
  }

  overdraftAllocation(): Address {
    let result = super.call(
      "overdraftAllocation",
      "overdraftAllocation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_overdraftAllocation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "overdraftAllocation",
      "overdraftAllocation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  teamTotal(): BigInt {
    let result = super.call("teamTotal", "teamTotal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_teamTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("teamTotal", "teamTotal():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(_spender: Address, _value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(_spender: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  advisersPeriodLength(): BigInt {
    let result = super.call(
      "advisersPeriodLength",
      "advisersPeriodLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_advisersPeriodLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "advisersPeriodLength",
      "advisersPeriodLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  investorsTotal(): BigInt {
    let result = super.call("investorsTotal", "investorsTotal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_investorsTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "investorsTotal",
      "investorsTotal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  advisersCliff(): BigInt {
    let result = super.call("advisersCliff", "advisersCliff():(uint256)", []);

    return result[0].toBigInt();
  }

  try_advisersCliff(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "advisersCliff",
      "advisersCliff():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(_from: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _from: Address,
    _to: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  teamCliff(): BigInt {
    let result = super.call("teamCliff", "teamCliff():(uint256)", []);

    return result[0].toBigInt();
  }

  try_teamCliff(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("teamCliff", "teamCliff():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  investorsAllocation(): Address {
    let result = super.call(
      "investorsAllocation",
      "investorsAllocation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_investorsAllocation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "investorsAllocation",
      "investorsAllocation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  advisersPeriodsNumber(): i32 {
    let result = super.call(
      "advisersPeriodsNumber",
      "advisersPeriodsNumber():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_advisersPeriodsNumber(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "advisersPeriodsNumber",
      "advisersPeriodsNumber():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  overdraftCliff(): BigInt {
    let result = super.call("overdraftCliff", "overdraftCliff():(uint256)", []);

    return result[0].toBigInt();
  }

  try_overdraftCliff(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "overdraftCliff",
      "overdraftCliff():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  communityUnvested(): BigInt {
    let result = super.call(
      "communityUnvested",
      "communityUnvested():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_communityUnvested(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "communityUnvested",
      "communityUnvested():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  overdraftPeriodLength(): BigInt {
    let result = super.call(
      "overdraftPeriodLength",
      "overdraftPeriodLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_overdraftPeriodLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "overdraftPeriodLength",
      "overdraftPeriodLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  advisersPeriodAmount(): BigInt {
    let result = super.call(
      "advisersPeriodAmount",
      "advisersPeriodAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_advisersPeriodAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "advisersPeriodAmount",
      "advisersPeriodAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  advisersTotal(): BigInt {
    let result = super.call("advisersTotal", "advisersTotal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_advisersTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "advisersTotal",
      "advisersTotal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  communityPeriodLength(): BigInt {
    let result = super.call(
      "communityPeriodLength",
      "communityPeriodLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_communityPeriodLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "communityPeriodLength",
      "communityPeriodLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  teamUnvested(): BigInt {
    let result = super.call("teamUnvested", "teamUnvested():(uint256)", []);

    return result[0].toBigInt();
  }

  try_teamUnvested(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("teamUnvested", "teamUnvested():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  advisersAllocation(): Address {
    let result = super.call(
      "advisersAllocation",
      "advisersAllocation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_advisersAllocation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "advisersAllocation",
      "advisersAllocation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decreaseApproval(_spender: Address, _value: BigInt): boolean {
    let result = super.call(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseApproval(
    _spender: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseApproval",
      "decreaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  teamAllocation(): Address {
    let result = super.call("teamAllocation", "teamAllocation():(address)", []);

    return result[0].toAddress();
  }

  try_teamAllocation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "teamAllocation",
      "teamAllocation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  teamPeriodAmount(): BigInt {
    let result = super.call(
      "teamPeriodAmount",
      "teamPeriodAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_teamPeriodAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "teamPeriodAmount",
      "teamPeriodAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  potentialOwner(): Address {
    let result = super.call("potentialOwner", "potentialOwner():(address)", []);

    return result[0].toAddress();
  }

  try_potentialOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "potentialOwner",
      "potentialOwner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  advisersUnvested(): BigInt {
    let result = super.call(
      "advisersUnvested",
      "advisersUnvested():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_advisersUnvested(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "advisersUnvested",
      "advisersUnvested():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  overdraftPeriodAmount(): BigInt {
    let result = super.call(
      "overdraftPeriodAmount",
      "overdraftPeriodAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_overdraftPeriodAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "overdraftPeriodAmount",
      "overdraftPeriodAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transferERC20Token(_token: Address, _to: Address, _value: BigInt): boolean {
    let result = super.call(
      "transferERC20Token",
      "transferERC20Token(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferERC20Token(
    _token: Address,
    _to: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferERC20Token",
      "transferERC20Token(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  communityPeriodAmount(): BigInt {
    let result = super.call(
      "communityPeriodAmount",
      "communityPeriodAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_communityPeriodAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "communityPeriodAmount",
      "communityPeriodAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  communityCliff(): BigInt {
    let result = super.call("communityCliff", "communityCliff():(uint256)", []);

    return result[0].toBigInt();
  }

  try_communityCliff(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "communityCliff",
      "communityCliff():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  overdraftUnvested(): BigInt {
    let result = super.call(
      "overdraftUnvested",
      "overdraftUnvested():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_overdraftUnvested(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "overdraftUnvested",
      "overdraftUnvested():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(_to: Address, _value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(_to: Address, _value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  teamPeriodsNumber(): i32 {
    let result = super.call(
      "teamPeriodsNumber",
      "teamPeriodsNumber():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_teamPeriodsNumber(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "teamPeriodsNumber",
      "teamPeriodsNumber():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  overdraftPeriodsNumber(): i32 {
    let result = super.call(
      "overdraftPeriodsNumber",
      "overdraftPeriodsNumber():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_overdraftPeriodsNumber(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "overdraftPeriodsNumber",
      "overdraftPeriodsNumber():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  overdraftTotal(): BigInt {
    let result = super.call("overdraftTotal", "overdraftTotal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_overdraftTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "overdraftTotal",
      "overdraftTotal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  teamPeriodLength(): BigInt {
    let result = super.call(
      "teamPeriodLength",
      "teamPeriodLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_teamPeriodLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "teamPeriodLength",
      "teamPeriodLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  communityAllocation(): Address {
    let result = super.call(
      "communityAllocation",
      "communityAllocation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_communityAllocation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "communityAllocation",
      "communityAllocation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseApproval(_spender: Address, _value: BigInt): boolean {
    let result = super.call(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseApproval(
    _spender: Address,
    _value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseApproval",
      "increaseApproval(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_spender),
        ethereum.Value.fromUnsignedBigInt(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  creationTime(): BigInt {
    let result = super.call("creationTime", "creationTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_creationTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("creationTime", "creationTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  communityPeriodsNumber(): i32 {
    let result = super.call(
      "communityPeriodsNumber",
      "communityPeriodsNumber():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_communityPeriodsNumber(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "communityPeriodsNumber",
      "communityPeriodsNumber():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  communityTotal(): BigInt {
    let result = super.call("communityTotal", "communityTotal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_communityTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "communityTotal",
      "communityTotal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _new(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawAdvisersTokensCall extends ethereum.Call {
  get inputs(): WithdrawAdvisersTokensCall__Inputs {
    return new WithdrawAdvisersTokensCall__Inputs(this);
  }

  get outputs(): WithdrawAdvisersTokensCall__Outputs {
    return new WithdrawAdvisersTokensCall__Outputs(this);
  }
}

export class WithdrawAdvisersTokensCall__Inputs {
  _call: WithdrawAdvisersTokensCall;

  constructor(call: WithdrawAdvisersTokensCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountWithDecimals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawAdvisersTokensCall__Outputs {
  _call: WithdrawAdvisersTokensCall;

  constructor(call: WithdrawAdvisersTokensCall) {
    this._call = call;
  }
}

export class WithdrawTeamTokensCall extends ethereum.Call {
  get inputs(): WithdrawTeamTokensCall__Inputs {
    return new WithdrawTeamTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTeamTokensCall__Outputs {
    return new WithdrawTeamTokensCall__Outputs(this);
  }
}

export class WithdrawTeamTokensCall__Inputs {
  _call: WithdrawTeamTokensCall;

  constructor(call: WithdrawTeamTokensCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountWithDecimals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawTeamTokensCall__Outputs {
  _call: WithdrawTeamTokensCall;

  constructor(call: WithdrawTeamTokensCall) {
    this._call = call;
  }
}

export class DistributeInvestorsTokensCall extends ethereum.Call {
  get inputs(): DistributeInvestorsTokensCall__Inputs {
    return new DistributeInvestorsTokensCall__Inputs(this);
  }

  get outputs(): DistributeInvestorsTokensCall__Outputs {
    return new DistributeInvestorsTokensCall__Outputs(this);
  }
}

export class DistributeInvestorsTokensCall__Inputs {
  _call: DistributeInvestorsTokensCall;

  constructor(call: DistributeInvestorsTokensCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountWithDecimals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DistributeInvestorsTokensCall__Outputs {
  _call: DistributeInvestorsTokensCall;

  constructor(call: DistributeInvestorsTokensCall) {
    this._call = call;
  }
}

export class DecreaseApprovalCall extends ethereum.Call {
  get inputs(): DecreaseApprovalCall__Inputs {
    return new DecreaseApprovalCall__Inputs(this);
  }

  get outputs(): DecreaseApprovalCall__Outputs {
    return new DecreaseApprovalCall__Outputs(this);
  }
}

export class DecreaseApprovalCall__Inputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseApprovalCall__Outputs {
  _call: DecreaseApprovalCall;

  constructor(call: DecreaseApprovalCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferERC20TokenCall extends ethereum.Call {
  get inputs(): TransferERC20TokenCall__Inputs {
    return new TransferERC20TokenCall__Inputs(this);
  }

  get outputs(): TransferERC20TokenCall__Outputs {
    return new TransferERC20TokenCall__Outputs(this);
  }
}

export class TransferERC20TokenCall__Inputs {
  _call: TransferERC20TokenCall;

  constructor(call: TransferERC20TokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferERC20TokenCall__Outputs {
  _call: TransferERC20TokenCall;

  constructor(call: TransferERC20TokenCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawOverdraftTokensCall extends ethereum.Call {
  get inputs(): WithdrawOverdraftTokensCall__Inputs {
    return new WithdrawOverdraftTokensCall__Inputs(this);
  }

  get outputs(): WithdrawOverdraftTokensCall__Outputs {
    return new WithdrawOverdraftTokensCall__Outputs(this);
  }
}

export class WithdrawOverdraftTokensCall__Inputs {
  _call: WithdrawOverdraftTokensCall;

  constructor(call: WithdrawOverdraftTokensCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountWithDecimals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawOverdraftTokensCall__Outputs {
  _call: WithdrawOverdraftTokensCall;

  constructor(call: WithdrawOverdraftTokensCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ConfirmOwnershipCall extends ethereum.Call {
  get inputs(): ConfirmOwnershipCall__Inputs {
    return new ConfirmOwnershipCall__Inputs(this);
  }

  get outputs(): ConfirmOwnershipCall__Outputs {
    return new ConfirmOwnershipCall__Outputs(this);
  }
}

export class ConfirmOwnershipCall__Inputs {
  _call: ConfirmOwnershipCall;

  constructor(call: ConfirmOwnershipCall) {
    this._call = call;
  }
}

export class ConfirmOwnershipCall__Outputs {
  _call: ConfirmOwnershipCall;

  constructor(call: ConfirmOwnershipCall) {
    this._call = call;
  }
}

export class IncreaseApprovalCall extends ethereum.Call {
  get inputs(): IncreaseApprovalCall__Inputs {
    return new IncreaseApprovalCall__Inputs(this);
  }

  get outputs(): IncreaseApprovalCall__Outputs {
    return new IncreaseApprovalCall__Outputs(this);
  }
}

export class IncreaseApprovalCall__Inputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseApprovalCall__Outputs {
  _call: IncreaseApprovalCall;

  constructor(call: IncreaseApprovalCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawCommunityTokensCall extends ethereum.Call {
  get inputs(): WithdrawCommunityTokensCall__Inputs {
    return new WithdrawCommunityTokensCall__Inputs(this);
  }

  get outputs(): WithdrawCommunityTokensCall__Outputs {
    return new WithdrawCommunityTokensCall__Outputs(this);
  }
}

export class WithdrawCommunityTokensCall__Inputs {
  _call: WithdrawCommunityTokensCall;

  constructor(call: WithdrawCommunityTokensCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountWithDecimals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCommunityTokensCall__Outputs {
  _call: WithdrawCommunityTokensCall;

  constructor(call: WithdrawCommunityTokensCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
